# water_order_bot.py

import logging
import re
from datetime import datetime

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    KeyboardButton,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

import gspread
from oauth2client.service_account import ServiceAccountCredentials

# -------------------- –ù–ê–°–¢–†–û–ô–ö–ò --------------------
BOT_TOKEN = "8076676164:AAHDTOzxedkQd0dyUpKBgd4yJ25xyiPSEiI"
OWNER_CHAT_ID = 7258655708  # Example: 123456789
GOOGLE_SHEET_NAME = "WaterOrders"  # –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã
REGION_COURIERS = {
    "—Å–∏–Ω–æ": [111111111],
    "—Å–æ–º–æ–Ω–∏": [222222222],
    "—Ñ–∏—Ä–¥–∞–≤—Å–∏": [333333333],
}

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–º–µ–Ω–∏–ª–∏ BOT_TOKEN –∏ OWNER_CHAT_ID –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—ã—à–µ.

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

ASK_LANG, ASK_ADDRESS, ASK_PHONE, ASK_QUANTITY, CONFIRM = range(5)

# -------------------- GOOGLE SHEETS --------------------
async def save_to_google_sheets(data, context=None):
    try:
        scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
        creds = ServiceAccountCredentials.from_json_keyfile_name("creds.json", scope)
        client = gspread.authorize(creds)
        sheet = client.open(GOOGLE_SHEET_NAME).sheet1
        sheet.append_row([
            datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            data.get("username", "‚Äî"),
            data["phone"],
            data["address"],
            data["quantity"],
            data.get("lang", "ru"),
            data.get("region", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        ])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google Sheets: {e}")
        if context is not None:
            try:
                await context.bot.send_message(chat_id=OWNER_CHAT_ID, text=f"‚ùó –û—à–∏–±–∫–∞ Google Sheets: {e}")
            except Exception as err:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É: {err}")

# -------------------- –•–≠–õ–ü–ï–† --------------------
def get_region(address):
    address = address.lower()
    for region in REGION_COURIERS:
        if region in address:
            return region
    return None

# –°–ª–æ–≤–∞—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏
MESSAGES = {
    "choose_lang": {
        "ru": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –ó–∞–±–æ–Ω–∏ —Ö—É–¥—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:",
        "tj": "–ó–∞–±–æ–Ω–∏ —Ö—É–¥—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥ / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:"
    },
    "press_order": {
        "ru": '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–∫–∞–∑–∞—Ç—å":',
        "tj": '–¢—É–≥–º–∞–∏ "–§–∞—Ä–º–æ–∏—à –¥–æ–¥–∞–Ω"-—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥:'
    },
    "enter_address": {
        "ru": "üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
        "tj": "üìç –ù–∏—à–æ–Ω–∏–∏ —Ä–∞—Å–æ–Ω–∏–¥–∞–Ω—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:"
    },
    "enter_phone": {
        "ru": "üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (9 —Ü–∏—Ñ—Ä):",
        "tj": "üìû –†–∞“õ–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (9 —Ä–∞“õ–∞–º):"
    },
    "phone_error": {
        "ru": "‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 9 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
        "tj": "‚ùå –†–∞“õ–∞–º –±–æ—è–¥ 9 —Ä–∞“õ–∞–º –±–æ—à–∞–¥. –ê–∑ –Ω–∞–≤ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥:"
    },
    "enter_quantity": {
        "ru": "üíß –°–∫–æ–ª—å–∫–æ –±—É—Ç—ã–ª–µ–π –ø–æ 19–ª –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?",
        "tj": "üíß –ß–∞–Ω–¥ –±—É—Ç–ª–∏–∏ 19-–ª–∏—Ç—Ä–∞ —Ñ–∞—Ä–º–æ–∏—à –º–µ–¥–∏“≥–µ–¥?"
    },
    "quantity_error": {
        "ru": "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (> 0)",
        "tj": "‚ùå –†–∞“õ–∞–º–∏ –¥—É—Ä—É—Å—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (> 0)"
    },
    "order_confirm": {
        "ru": "‚úÖ –í–∞—à –∑–∞–∫–∞–∑:\nüìç –ê–¥—Ä–µ—Å: {address}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\nüíß –ö–æ–ª-–≤–æ: {quantity} –±—É—Ç—ã–ª–µ–π –ø–æ 19–ª\nüì¶ –†–∞–π–æ–Ω: {region}\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑? (–î–∞ / –ù–µ—Ç)",
        "tj": "‚úÖ –§–∞—Ä–º–æ–∏—à–∏ —à—É–º–æ:\nüìç –ù–∏—à–æ–Ω”£: {address}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\nüíß –ú–∏“õ–¥–æ—Ä: {quantity} –±—É—Ç–ª–∏–∏ 19–ª\nüì¶ –ù–æ“≥–∏—è: {region}\n–§–∞—Ä–º–æ–∏—à—Ä–æ —Ñ–∏—Ä–∏—Å—Ç–µ–¥? (“≤–∞ / –ù–µ)"
    },
    "order_sent": {
        "ru": "‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ!",
        "tj": "‚úÖ –§–∞—Ä–º–æ–∏—à —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥! –¢–∞—à–∞–∫–∫—É—Ä!"
    },
    "order_cancel": {
        "ru": "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.",
        "tj": "‚ùå –§–∞—Ä–º–æ–∏—à –±–µ–∫–æ—Ä —à—É–¥."
    },
}

# -------------------- –•–≠–ù–î–õ–ï–†–´ --------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["üá∑üá∫ –†—É—Å—Å–∫–∏–π"], ["üáπüáØ –¢–æ“∑–∏–∫”£"]]
    await update.message.reply_text(
        MESSAGES["choose_lang"]["ru"],
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return ASK_LANG

async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = "ru" if "—Ä—É—Å" in update.message.text.lower() else "tj"
    context.user_data["lang"] = lang
    label = "–ó–∞–∫–∞–∑–∞—Ç—å" if lang == "ru" else "–§–∞—Ä–º–æ–∏—à –¥–æ–¥–∞–Ω"
    await update.message.reply_text(
        MESSAGES["press_order"][lang],
        reply_markup=ReplyKeyboardMarkup([[label]], resize_keyboard=True)
    )
    return ASK_ADDRESS

async def ask_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data["lang"]
    if (lang == "ru" and "–∑–∞–∫–∞–∑–∞—Ç—å" in update.message.text.lower()) or \
       (lang == "tj" and "—Ñ–∞—Ä–º–æ–∏—à" in update.message.text.lower()):
        await update.message.reply_text(
            MESSAGES["enter_address"][lang],
            reply_markup=ReplyKeyboardRemove()
        )
        return ASK_PHONE
    else:
        return ASK_ADDRESS

async def ask_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["address"] = update.message.text
    region = get_region(update.message.text)
    context.user_data["region"] = region
    lang = context.user_data["lang"]
    await update.message.reply_text(MESSAGES["enter_phone"][lang])
    return ASK_QUANTITY

async def ask_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text.strip()
    lang = context.user_data["lang"]
    if not re.fullmatch(r"\d{9}", phone):
        await update.message.reply_text(MESSAGES["phone_error"][lang])
        return ASK_QUANTITY
    context.user_data["phone"] = phone
    await update.message.reply_text(MESSAGES["enter_quantity"][lang])
    return CONFIRM

async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data["lang"]
    try:
        quantity = int(update.message.text)
        if quantity <= 0:
            raise ValueError
        context.user_data["quantity"] = quantity
    except ValueError:
        await update.message.reply_text(MESSAGES["quantity_error"][lang])
        return CONFIRM

    data = context.user_data
    msg = MESSAGES["order_confirm"][lang].format(
        address=data["address"],
        phone=data["phone"],
        quantity=data["quantity"],
        region=data.get("region", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    )
    btns = [["–î–∞", "–ù–µ—Ç"]] if lang == "ru" else [["“≤–∞", "–ù–µ"]]
    await update.message.reply_text(
        msg,
        reply_markup=ReplyKeyboardMarkup(btns, resize_keyboard=True)
    )
    return ConversationHandler.END

async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "ru")
    text = update.message.text.lower()
    if (lang == "ru" and "–¥–∞" in text) or (lang == "tj" and "“≥–∞" in text):
        data = context.user_data
        user = update.effective_user
        data["username"] = user.username or user.first_name

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É
        msg = (f"üö® –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{data['username']}:\n"
               f"üìç {data['address']}\n"
               f"üìû {data['phone']}\n"
               f"üíß {data['quantity']} –±—É—Ç—ã–ª–µ–π\n")
        await context.bot.send_message(chat_id=OWNER_CHAT_ID, text=msg)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–∞–º –ø–æ —Ä–∞–π–æ–Ω—É
        region = data.get("region")
        if region and region in REGION_COURIERS:
            for courier_id in REGION_COURIERS[region]:
                await context.bot.send_message(chat_id=courier_id, text=msg)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
        await save_to_google_sheets(data, context)
        await update.message.reply_text(
            MESSAGES["order_sent"][lang],
            reply_markup=ReplyKeyboardMarkup([["–ó–∞–Ω–æ–≤–æ"]], resize_keyboard=True)
        )
    else:
        await update.message.reply_text(
            MESSAGES["order_cancel"][lang],
            reply_markup=ReplyKeyboardMarkup([["–ó–∞–Ω–æ–≤–æ"]], resize_keyboard=True)
        )

    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "ru")
    await update.message.reply_text(MESSAGES["order_cancel"][lang], reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# -------------------- –ó–ê–ü–£–°–ö --------------------

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start), MessageHandler(filters.Regex("^–ó–∞–Ω–æ–≤–æ$"), start)],
        states={
            ASK_LANG: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_language)],
            ASK_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_address)],
            ASK_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_phone)],
            ASK_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_quantity)],
            CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )

    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.Regex("^(–î–∞|–ù–µ—Ç|“≤–∞|–ù–µ)$"), handle_confirmation))
    app.add_handler(MessageHandler(filters.Regex("^–ó–∞–Ω–æ–≤–æ$"), start))

    app.run_polling()

if __name__ == '__main__':
    main()
